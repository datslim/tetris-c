/**
 * @file game_tetromino.h
 * @brief Модуль для работы с тетромино в игре.
 * @author lucoscly
 *
 * Этот модуль предоставляет функции для инициализации, перемещения и фиксации
 * тетромино на игровом поле.
 */

#ifndef TETROMINO_H
#define TETROMINO_H

#include "../game.h"

// Макросы для фигур тетромино

/**
 * @brief I-фигура (палка).
 * ```
 * Форма:
 * 0 0 0 0
 * 1 1 1 1
 * 0 0 0 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_I                                          \
  {                                                          \
    {0, 0, 0, 0}, {1, 1, 1, 1}, {0, 0, 0, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief O-фигура (квадрат).
 * ```
 * Форма:
 * 0 0 0 0
 * 0 1 1 0
 * 0 1 1 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_O                                          \
  {                                                          \
    {0, 0, 0, 0}, {0, 1, 1, 0}, {0, 1, 1, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief T-фигура (буква T).
 * ```
 * Форма:
 * 0 0 0 0
 * 0 1 1 1
 * 0 0 1 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_T                                          \
  {                                                          \
    {0, 0, 0, 0}, {0, 1, 1, 1}, {0, 0, 1, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief S-фигура (зигзаг).
 * ```
 * Форма:
 * 0 0 0 0
 * 0 1 1 0
 * 1 1 0 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_S                                          \
  {                                                          \
    {0, 0, 0, 0}, {0, 1, 1, 0}, {1, 1, 0, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief Z-фигура (обратный зигзаг).
 * ```
 * Форма:
 * 0 0 0 0
 * 1 1 0 0
 * 0 1 1 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_Z                                          \
  {                                                          \
    {0, 0, 0, 0}, {1, 1, 0, 0}, {0, 1, 1, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief L-фигура (буква L).
 * ```
 * Форма:
 * 0 0 0 0
 * 1 1 1 0
 * 1 0 0 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_L                                          \
  {                                                          \
    {0, 0, 0, 0}, {1, 1, 1, 0}, {1, 0, 0, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief J-фигура (обратная буква L).
 *  * ```
 * Форма:
 * 0 0 0 0
 * 1 1 1 0
 * 0 0 1 0
 * 0 0 0 0
 * ```
 */
#define TETROMINO_J                                          \
  {                                                          \
    {0, 0, 0, 0}, {1, 1, 1, 0}, {0, 0, 1, 0}, { 0, 0, 0, 0 } \
  }

/**
 * @brief Инициализирует тетромино заданного типа.
 *
 * @param tetromino Указатель на структуру Tetromino_t, которую нужно
 * инициализировать.
 * @param type Тип тетромино (от 0 до 6, где каждый тип соответствует
 * определённой фигуре).
 */
void init_current_tetromino(Tetromino_t *tetromino, int type);

/**
 * @brief Проверяет возможность движения тетромино вниз.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 * @return 1, если движение вниз возможно, иначе 0.
 */
int can_move_down(GameState *state);

/**
 * @brief Проверяет возможность движения тетромино влево.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 * @return 1, если движение влево возможно, иначе 0.
 */
int can_move_left(GameState *state);

/**
 * @brief Проверяет возможность движения тетромино вправо.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 * @return 1, если движение вправо возможно, иначе 0.
 */
int can_move_right(GameState *state);

/**
 * @brief Проверяет возможность поворота тетромино.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 * @return 1, если поворот возможен, иначе 0.
 */
int can_rotate(GameState *state);

/**
 * @brief Перемещает тетромино влево.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 */
void move_left(GameState *state);

/**
 * @brief Перемещает тетромино вправо.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 */
void move_right(GameState *state);

/**
 * @brief Перемещает тетромино вниз.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 */
void move_down(GameState *state);

/**
 * @brief Поворачивает тетромино.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 */
void rotate_tetromino(GameState *state);

/**
 * @brief Фиксирует тетромино на игровом поле.
 *
 * После фиксации тетромино становится частью игрового поля, и дальнейшее
 * управление им невозможно.
 *
 * @param state Указатель на структуру GameState, содержащую текущее состояние
 * игры.
 */
void fix_tetromino(GameState *state);

#endif  // TETROMINO_H